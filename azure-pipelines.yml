trigger:
  - main

pool:
  name: 'Default'  # Use 'ubuntu-latest' if not using a self-hosted agent

variables:
  - group: aws_ecr_repo  # Should include aws_account, Region, container_image_app, container_image_nginx
  - name: IMAGE_TAG
    value: $(Build.BuildId)

stages:
  - stage: DockerLogin
    displayName: Docker Login
    jobs:
      - job: DockerLogin
        displayName: Docker Login Job
        steps:
          - script: |
              echo "Logging into AWS ECR..."
              aws ecr get-login-password --region "$(Region)" | \
              docker login --username AWS --password-stdin "$(aws_account).dkr.ecr.$(Region).amazonaws.com"
            displayName: 'Login to Docker'

  - stage: BuildPush
    displayName: Build and Push Docker Image
    dependsOn: DockerLogin
    jobs:
      - job: DockerBuildPush
        displayName: Build and Push Image
        steps: 
          - checkout: self

          - script: |
              echo "Building app image"
              docker build -t $(container_image_app):$(IMAGE_TAG) -f project/docker/app/Dockerfile .

              echo "Building nginx image"
              docker build -t $(container_image_nginx):$(IMAGE_TAG) -f project/docker/nginx/Dockerfile .

              echo "Pushing images to ECR..."
              docker push $(container_image_app):$(IMAGE_TAG)
              docker push $(container_image_nginx):$(IMAGE_TAG)
            displayName: 'Build and Push Docker Images'

  - stage: Terraform
    displayName: Terraform Apply
    dependsOn: BuildPush
    variables:
      IMAGE_APP: "$(container_image_app):$(IMAGE_TAG)"  
      IMAGE_NGINX: "$(container_image_nginx):$(IMAGE_TAG)"  

    jobs:
      - job: Terraform
        displayName: Terraform Job
        steps:
          - checkout: self

          - script: terraform version
            displayName: 'Check Terraform Version'

          - script: terraform init
            displayName: 'Terraform Init'
            workingDirectory: '$(System.DefaultWorkingDirectory)'

          - script: |
              terraform plan \
                -var-file="terraform.tfvars" \
                -var="container_image_app=$(IMAGE_APP)" \
                -var="container_image_nginx=$(IMAGE_NGINX)"
            displayName: 'Terraform Plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)'

          - script: |
              terraform apply --auto-approve \
                -var-file="terraform.tfvars" \
                -var="container_image_app=$(IMAGE_APP)" \
                -var="container_image_nginx=$(IMAGE_NGINX)"
            displayName: 'Terraform Apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)'

  - stage: Destroy
    displayName: Terraform Destroy
    dependsOn: Terraform
    condition: succeeded()
    jobs:
      - deployment: TerraformDestroy  # ✅ Use 'deployment' instead of 'job'
        displayName: Destroy Infrastructure
        environment: 'Manual-Approval'  # ✅ Now valid here
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - script: terraform init
                  displayName: 'Terraform Init'
                  workingDirectory: '$(System.DefaultWorkingDirectory)'

                - script: |
                    terraform destroy --auto-approve \
                    -var-file="terraform.tfvars" \
                    -var="container_image_app=$(IMAGE_NGINX)" \
                    -var="container_image_nginx=$(IMAGE_APP)"
                  displayName: 'Terraform Destroy'
                  workingDirectory: '$(System.DefaultWorkingDirectory)'
